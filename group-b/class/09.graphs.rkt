#lang racket

; Граф за нас ще означава списък от двойки (ребра)
; например '((1 . 2) (2 . 3) (2 . 5) (2 . 4) (4 . 3) (5 . 4))

(define g '((1 . 2) (2 . 3) (2 . 5) (2 . 4) (4 . 3) (5 . 4)))

; търсим входна степен на даден връх
(define (in-degree g v)
  (void)
)

; търсим изходна степен на даден връх
(define (out-degree g v)
  (void)
)

; искаме списък с всички върхове на g
(define (nodes g)
  (void)
)

; преобразуваме g към представяне със списък на съседство
(define (to-adjacency-list g)
  (void)
)

; проверяваме дали в g има път между два дадени върха
(define (path? g from to)
  (void)
)

; искаме всички (прости) пътища между два дадени върха
(define (simple-paths g from to)
  (void)
)

; искаме най-късият (прост) път между два дадени върха
(define (shortest-path g from to)
  (void)
)
