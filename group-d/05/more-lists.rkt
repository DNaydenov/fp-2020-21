#lang racket

; Предния път работихме със списъци, а по-предния видяхме една функция с много
; аргументи - accumulate.
; Тя работи върху интервал от числа, но сега ще погледнем 2 функции
; със сходна идея, но върху списъци.

; TODO няколко думи за foldl и foldr


; take и drop са доста полезни функции, но от racket/list.
; За жалост ги няма в r5rs.

; Връща подсписък с първите n елемента
(take '(1 2 3 4 5) 2) ; '(1 2)

; Връща подсписък без първите n елемента
(drop '(1 2 3 4 5) 2) ; '(3 4 5)


; Както знаем има функции в scheme, които могат
; да приемат произволен брой аргументи.

; map с произволен брой аргументи
(map + '(1 2 3) '(4 5 6)) ; '(5 7 9)

; apply прилага функция над списък от аргументи
(apply + '(1 2 3 4 5)) ; 15
(apply max '(1 2 3 11 4 5)) ; 11

(apply * 2 '(1 2 3)) ; 12
; същото като (* 2 1 2 3)

; apply има вида: (apply proc v ... lst kw-arg ...)
; Но засега няма да се интересуваме от последните аргументи kw-arg
; Освен подадения списък обаче, apply може да приема и допълнителни аргументи
; (онези v-та)

(apply map + '((1 2 3) (4 5 6))) ; '(5 7 9)
; Тук + е допълнителен аргумент към map и затова apply работи нормално.
; Горното се свежда до:
(map + '(1 2 3) '(4 5 6)) ; т.е. map на повече аргументи

; Можем да правим функции на произволен брой аргументи
; (lambda (<args> . <args-list>) <body>)
; Където на мястото на args са изброени задължителните параметри,
; а args-list е списък с опционални параметри.
(lambda (x . l) (- x (apply + l)))
; define за функции всъщност е синтактична захар за свързване на име с ламбда.
; Тоест можем да правим и така
(define (sum x . l) (foldl + 0 (cons x l)))


;;;;;;;;;;
; ЗАДАЧИ ;
;;;;;;;;;;

; TODO още няколко задачи?
; TODO още неща чрез foldl/foldr?

; 1. Връща списък с елементите на lst, но в обратен ред.
(define (reverse* lst) void)

; 2. Свива lst наляво с операцията op и начална стойност acc (акумулатор).
(define (foldr* op acc lst) void)

; 3. Свива lst надясно с операцията op и начална стойност acc (акумулатор).
(define (foldr* op acc lst) void)

; 4. Намира дължина на списък. Реализирайте я чрез foldl или foldr.
(define (length* lst) void)

; 5. Намира броя на елементите в дълбокия списък lst. Тоест lst може да има
;    произволни нива на вложеност.
(define (count-atoms lst) void)

; 6. Връща списъка lst само с първите n елемента.
(define (take* lst n) void)

; 7. Връща списъка lst без първите n елемента.
(define (drop* lst n) void)

; 8. За дадена матрица m връща транспонираната матрица. Матрицата е представена
;    като списък от редове. Всеки ред е списък от елементи.
(define (transpose m) void)

; TODO transpose чрез apply
