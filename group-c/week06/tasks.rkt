#lang racket
; Графи
; Формално представяне: G(V, E)
; V - множество от върхове
; E - множество от наредени двойки (ориентиран граф) или двуелементни множества (неориентиран граф)
; За целта на задачите, E ще се представя като списък от наредени двойки, а върховете ще са индексирани с цели числа

; Задача 1: Да се дефинира функция (nodes edges), която приема списък с ребрата edges на даден ориентиран граф (в който всяко ребро е представено като двойка (from . to)) и връща списък, съдържащ всички върхове на съответния граф.
; Задача 2: Да се дефинира функция (adjacency-list edges), която приема списък с ребрата edges на даден ориентиран граф (в който всяко ребро е представено като двойка (from . to)) и връща списъка на наследниците на съответния граф.
; Задача 3: Да се дефинира функция (path? edges nodes), която приема списък с ребрата edges на даден ориентиран граф и списък от върхове nodes и връща дали списъкът nodes е път в графа описан от edges.
; Задача 4: Да се дефинира функция (simple-paths edges k from), която приема списък с ребрата edges на даден ориентиран граф, цяло число k и идентификатор на връх node и връща всички прости пътища с дължина k, които започват от from.
; Задача 5: Да се дефинира функция (all-simple-paths edges from to), която приема списък с ребрата edges на даден ориентиран граф и два идентификатора на върхове from и to и връща всички прости пътища, които започват от from и завършват в to.
; Задача 6*: Да се дефинира функция (shortest-path edges from to), която приема списък с ребрата edges на даден ориентиран граф и идентификатори на върховете from и to и връща произволен най-къс път от from до to
